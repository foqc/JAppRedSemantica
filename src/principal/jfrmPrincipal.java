/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import modelo.redSemantica.CRedSemantica;

/**
 *
 * @author root
 */
public class jfrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form jfrmPrincipal
     */
    CRedSemantica redSemantica;

    public jfrmPrincipal() {
        initComponents();
        redSemantica = new CRedSemantica();
        txtPathArchivo.setText("/root/Desktop/RedSemanticaMortal.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCargarRS = new javax.swing.JButton();
        txtPathArchivo = new javax.swing.JTextField();
        txtCargarRedSemantica = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaRecorrido = new javax.swing.JTextArea();
        cbxEntidades = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtPertenece = new javax.swing.JButton();
        btnEliminarNodoRed = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtNodoOrigen = new javax.swing.JTextField();
        txtNodoDestino = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtRelacion = new javax.swing.JTextField();
        btnEliminarRelacion = new javax.swing.JButton();
        txtNuevoNodoRed = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnNuevoNodo = new javax.swing.JButton();
        btnAgregarRelacion = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cbxTipoRelacion = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Red Semántica");

        jLabel1.setFont(new java.awt.Font("Bitstream Vera Sans", 1, 18)); // NOI18N
        jLabel1.setText("Red Semántica");

        jLabel2.setText("Red Semántica");

        btnCargarRS.setText("Buscar Archivo");
        btnCargarRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarRSActionPerformed(evt);
            }
        });

        txtPathArchivo.setEditable(false);

        txtCargarRedSemantica.setText("Cargar Red Semántica");
        txtCargarRedSemantica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCargarRedSemanticaActionPerformed(evt);
            }
        });

        txtAreaRecorrido.setEditable(false);
        txtAreaRecorrido.setColumns(20);
        txtAreaRecorrido.setRows(5);
        jScrollPane1.setViewportView(txtAreaRecorrido);

        cbxEntidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEntidadesActionPerformed(evt);
            }
        });

        jLabel3.setText("Entidades");

        jButton1.setText("Características de...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtPertenece.setText("Pertenece A...");
        txtPertenece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPerteneceActionPerformed(evt);
            }
        });

        btnEliminarNodoRed.setText("Eliminar Nodo ");
        btnEliminarNodoRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarNodoRedActionPerformed(evt);
            }
        });

        jLabel4.setText("Nodo Origen");

        jLabel5.setText("Nodo Destino");

        jLabel6.setText("Relación");

        btnEliminarRelacion.setText("Eliminar Relación");
        btnEliminarRelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarRelacionActionPerformed(evt);
            }
        });

        jLabel7.setText("Nuevo Nodo Red");

        btnNuevoNodo.setText("Agregar Nodo");
        btnNuevoNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoNodoActionPerformed(evt);
            }
        });

        btnAgregarRelacion.setText("Agregar Relación");
        btnAgregarRelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarRelacionActionPerformed(evt);
            }
        });

        jLabel8.setText("Tipo Relación");

        cbxTipoRelacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Propiedad", "Instancia" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxTipoRelacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAgregarRelacion))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNodoOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRelacion, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNuevoNodoRed, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNuevoNodo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNodoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEliminarRelacion))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPathArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCargarRS))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCargarRedSemantica)
                                .addGap(90, 90, 90)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxEntidades, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPertenece)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminarNodoRed))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jLabel1)))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnCargarRS)
                    .addComponent(txtPathArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCargarRedSemantica)
                    .addComponent(cbxEntidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1)
                    .addComponent(txtPertenece)
                    .addComponent(btnEliminarNodoRed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNodoOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNodoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtRelacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarRelacion))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNuevoNodoRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(btnNuevoNodo)
                    .addComponent(jLabel8)
                    .addComponent(cbxTipoRelacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarRelacion))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarRSActionPerformed
        //Crear un objeto FileChooser
        JFileChooser fc = new JFileChooser();
        //Mostrar la ventana para abrir archivo y recoger la respuesta
        //En el parámetro del showOpenDialog se indica la ventana
        //  al que estará asociado. Con el valor this se asocia a la
        //  ventana que la abre.
        int respuesta = fc.showOpenDialog(this);
        //Comprobar si se ha pulsado Aceptar
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            //Crear un objeto File con el archivo elegido
            File archivoElegido = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            txtPathArchivo.setText(archivoElegido.getPath());
        }
    }//GEN-LAST:event_btnCargarRSActionPerformed

    private void txtCargarRedSemanticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCargarRedSemanticaActionPerformed
        if (!txtPathArchivo.getText().isEmpty()) {
            txtAreaRecorrido.setText("");
            redSemantica.cargarRedSemantica(txtPathArchivo.getText());
            recorrerRedSemantica(redSemantica.recorrerNodosRedSemantica());
            List<String> lista = devolverNodosRed(redSemantica.recorrerNodosRedSemantica());
            for (String nodoRed : lista) {
                cbxEntidades.addItem(nodoRed);
            }
        } else {
            txtAreaRecorrido.append("No se ha cargado aún la red semántica!");
        }
    }//GEN-LAST:event_txtCargarRedSemanticaActionPerformed

    private void cbxEntidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEntidadesActionPerformed


    }//GEN-LAST:event_cbxEntidadesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (cbxEntidades.getSelectedItem() != null) {
            txtAreaRecorrido.setText("");
            List<String> lstPropiedades = new ArrayList<>();
            recorrerPropiedades(redSemantica.propiedadesDe(cbxEntidades.getSelectedItem().toString(), lstPropiedades));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtPerteneceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPerteneceActionPerformed
        if (cbxEntidades.getSelectedItem() != null) {
            txtAreaRecorrido.setText("");
            List<String> lstPertenece = new ArrayList<>();
            recorrerQuienesSon(redSemantica.perteneceA(cbxEntidades.getSelectedItem().toString(), lstPertenece));
        }
    }//GEN-LAST:event_txtPerteneceActionPerformed

    private void btnEliminarNodoRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarNodoRedActionPerformed
        if (cbxEntidades.getSelectedItem() != null) {
            txtAreaRecorrido.setText("");
            redSemantica.eliminarNodoRed(cbxEntidades.getSelectedItem().toString());
            recorrerRedSemantica(redSemantica.recorrerNodosRedSemantica());
            cbxEntidades.removeAllItems();
            List<String> lista = devolverNodosRed(redSemantica.recorrerNodosRedSemantica());
            for (String nodoRed : lista) {
                cbxEntidades.addItem(nodoRed);
            }
        }
    }//GEN-LAST:event_btnEliminarNodoRedActionPerformed

    private void btnEliminarRelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarRelacionActionPerformed
        if (!txtNodoOrigen.getText().isEmpty() && !txtNodoDestino.getText().isEmpty() && !txtRelacion.getText().isEmpty()) {
            txtAreaRecorrido.setText("");
            redSemantica.eliminarNodosRelacion(txtNodoOrigen.getText().toUpperCase(), txtNodoDestino.getText().toUpperCase(), txtRelacion.getText().toUpperCase());
            recorrerRedSemantica(redSemantica.recorrerNodosRedSemantica());
        } else {
            txtAreaRecorrido.setText("Llene todas las cajas de texto (Nodo origen - relacion - Nodo Destino).");
        }
    }//GEN-LAST:event_btnEliminarRelacionActionPerformed

    private void btnNuevoNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoNodoActionPerformed
        if (!txtNuevoNodoRed.getText().isEmpty()) {
            if (redSemantica.insertarNodoRed(txtNuevoNodoRed.getText().toUpperCase())) {
                txtAreaRecorrido.setText("");
                recorrerRedSemantica(redSemantica.recorrerNodosRedSemantica());
                cbxEntidades.removeAllItems();
                List<String> lista = devolverNodosRed(redSemantica.recorrerNodosRedSemantica());
                for (String nodoRed : lista) {
                    cbxEntidades.addItem(nodoRed);
                }
            } else {
                txtAreaRecorrido.setText("No se ha insertado el nuevo nodo red.");
            }
        } else {
            txtAreaRecorrido.setText("Llene el campo Nuevo Nodo Red.");
        }
    }//GEN-LAST:event_btnNuevoNodoActionPerformed

    private void btnAgregarRelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarRelacionActionPerformed
        if (!txtNodoOrigen.getText().isEmpty() && !txtNodoDestino.getText().isEmpty() && !txtRelacion.getText().isEmpty()) {
            txtAreaRecorrido.setText("");
            String tipoRelacion = "I";
            if (cbxTipoRelacion.getSelectedItem().toString().equals("Propiedad")) {
                tipoRelacion = "P";
            }
            if (redSemantica.insertarRelacion(txtNodoOrigen.getText().toUpperCase(), txtNodoDestino.getText().toUpperCase(), txtRelacion.getText().toUpperCase(), tipoRelacion)) {
                recorrerRedSemantica(redSemantica.recorrerNodosRedSemantica());
            } else {
                txtAreaRecorrido.setText("La relación no se inserto!");
            }
        } else {
            txtAreaRecorrido.setText("Llene todas las cajas de texto (Nodo origen - relacion - Nodo Destino).");
        }
    }//GEN-LAST:event_btnAgregarRelacionActionPerformed

    private void recorrerPropiedades(List<String> lstPropiedades) {
        if (!lstPropiedades.isEmpty()) {
            txtAreaRecorrido.setText("");
            txtAreaRecorrido.append("Propiedades de: " + cbxEntidades.getSelectedItem().toString());
            txtAreaRecorrido.append(System.getProperty("line.separator"));
            for (String lstPropiedad : lstPropiedades) {
                txtAreaRecorrido.append(lstPropiedad);
                txtAreaRecorrido.append(System.getProperty("line.separator"));
            }
        } else {
            txtAreaRecorrido.append("No existe niguna caracteriticas para mostrar!");
        }
    }

    private void recorrerQuienesSon(List<String> lstQienesSon) {
        if (!lstQienesSon.isEmpty()) {
            txtAreaRecorrido.setText("");
            txtAreaRecorrido.append("Pertenece A: " + cbxEntidades.getSelectedItem().toString());
            txtAreaRecorrido.append(System.getProperty("line.separator"));
            for (String lstQienesSon1 : lstQienesSon) {
                txtAreaRecorrido.append(lstQienesSon1);
                txtAreaRecorrido.append(System.getProperty("line.separator"));
            }
        } else {
            txtAreaRecorrido.append("No existe nigun PERTENECE A... para mostrar!");
        }
    }

    private void recorrerRedSemantica(List<List<String>> lstInfoRedSemantica) {
        String aux;
        if (lstInfoRedSemantica != null) {
            txtAreaRecorrido.append("Numero nodos Red: " + lstInfoRedSemantica.size());
            txtAreaRecorrido.append(System.getProperty("line.separator"));
            for (List<String> lstInfoRedSemantica1 : lstInfoRedSemantica) {
                for (int j = 0; j < lstInfoRedSemantica1.size(); j++) {
                    aux = lstInfoRedSemantica1.get(j);
                    if (j == 0) {
                        txtAreaRecorrido.append("[" + aux + "] ->");
                    } else {
                        txtAreaRecorrido.append("  (" + aux + ")->");
                    }
                }
                txtAreaRecorrido.append("");
                txtAreaRecorrido.append(System.getProperty("line.separator"));
            }
            txtAreaRecorrido.append("");
            txtAreaRecorrido.append(System.getProperty("line.separator"));
        } else {
            txtAreaRecorrido.append("No se ha creado aún la red semántica!");
        }
    }

    private List<String> devolverNodosRed(List<List<String>> lstInfoRedSemantica) {
        String aux;
        List<String> nodosRed = new ArrayList<>();
        if (lstInfoRedSemantica != null) {
            for (List<String> lstInfoRedSemantica1 : lstInfoRedSemantica) {
                for (int j = 0; j < lstInfoRedSemantica1.size(); j++) {
                    aux = lstInfoRedSemantica1.get(j);
                    if (j == 0) {
                        nodosRed.add(aux);
                    }
                }
            }
        }
        return nodosRed;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarRelacion;
    private javax.swing.JButton btnCargarRS;
    private javax.swing.JButton btnEliminarNodoRed;
    private javax.swing.JButton btnEliminarRelacion;
    private javax.swing.JButton btnNuevoNodo;
    private javax.swing.JComboBox cbxEntidades;
    private javax.swing.JComboBox cbxTipoRelacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaRecorrido;
    private javax.swing.JButton txtCargarRedSemantica;
    private javax.swing.JTextField txtNodoDestino;
    private javax.swing.JTextField txtNodoOrigen;
    private javax.swing.JTextField txtNuevoNodoRed;
    private javax.swing.JTextField txtPathArchivo;
    private javax.swing.JButton txtPertenece;
    private javax.swing.JTextField txtRelacion;
    // End of variables declaration//GEN-END:variables
}
